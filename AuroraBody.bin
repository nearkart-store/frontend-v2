"use client";
import React, { useContext, useState } from "react";
import { ArrowUpFromLine } from "lucide-react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import { Context } from "@/context/ContextProvider";
import Navbar from "@/components/neoComponets/Navbar";

const AuroraBody = () => {
  const {
    submit,
    recentPrompts,
    displayResult,
    result,
    input,
    setInput,
    loading,
  } = useContext(Context);

  const [isInputEmpty, setIsInputEmpty] = useState(true);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
    setIsInputEmpty(e.target.value.trim() === "");
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!isInputEmpty) {
      await submit();
    }
  };

  return (
    <div>

      <div className="max-w-[900px] m-auto">
        {!displayResult ? (
          <div className="my-12 lg:text-4xl text-2xl font-medium text-center mt-40 lg:mt-[300px] p-5">
            <p className="text-zinc-500">How can I help you today?</p>
          </div>
        ) : (
          <div className="result p-5 flex flex-col gap-5">
            {/* User message */}
            <div className="self-end bg-neutral-800 text-white rounded-2xl p-4 w-full max-w-[75%]">
              <p className="text-xs text-gray-200 mb-1">You</p>
              <p>{recentPrompts}</p>
            </div>

            {/* AI response */}
            <div className="self-start bg-[#c54042] text-white rounded-2xl p-4 w-full max-w-[75%]">
              <p className="text-xs text-gray-200 mb-1">Neo</p>
              {loading ? (
                <p className="italic animate-pulse text-white">Neo is thinking...</p>
              ) : (
                <ReactMarkdown
                  remarkPlugins={[remarkGfm]}
                  components={{
                    h1: ({ node, ...props }) => <h1 className="text-3xl font-bold my-4" {...props} />,
                    h2: ({ node, ...props }) => <h2 className="text-2xl font-semibold my-3" {...props} />,
                    h3: ({ node, ...props }) => <h3 className="text-xl font-semibold my-2" {...props} />,
                    p: ({ node, ...props }) => <p className="my-2 leading-6 text-white" {...props} />,
                    li: ({ node, ...props }) => <li className="list-disc list-inside ml-5 my-1" {...props} />,
                    strong: ({ node, ...props }) => <strong className="font-semibold text-white" {...props} />,
                    em: ({ node, ...props }) => <em className="italic text-gray-300" {...props} />,
                    ul: ({ node, ...props }) => <ul className="my-2" {...props} />,
                  }}
                >
                  {result}
                </ReactMarkdown>
              )}
            </div>
          </div>
        )}

        {/* Input Box */}
        <div className="z-50 bottom-0 w-full max-w-[900px] px-5 m-auto fixed pt-5 bg-neutral-900">
          <form onSubmit={handleSubmit}>
            <div className="flex items-center justify-between gap-5 border border-zinc-800 py-1.5 pr-5 pl-2 rounded-lg">
              <input
                onChange={handleInputChange}
                value={input}
                type="text"
                className="flex-1 bg-transparent border-none outline-none p-2 text-md text-gray-100"
                placeholder="message sage..."
              />
              <div className={`flex ${isInputEmpty ? "pointer-events-none" : ""}`}>
                <button
                  type="submit"
                  className={`focus:outline-none ${isInputEmpty ? "opacity-50 cursor-not-allowed" : ""}`}
                >
                  <ArrowUpFromLine size={20} className="hover:text-zinc-100" />
                </button>
              </div>
            </div>
          </form>
          <p className="text-gray-400 text-xs text-center p-2">
            Neo can make mistakes. Check important info.
          </p>
        </div>
      </div>
    </div>
  );
};

export default AuroraBody;
